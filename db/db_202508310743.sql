-- Traducción del dump MySQL a PostgreSQL
-- Schema y configuración inicial
CREATE SCHEMA IF NOT EXISTS db_antares;
SET search_path = db_antares, public;

-- Tipos ENUM convertidos a tipos nativos de PostgreSQL
CREATE TYPE db_antares.admin_role AS ENUM ('superadmin','admin','operaciones','ventas','soporte');
CREATE TYPE db_antares.guia_estado AS ENUM ('Libre','Ocupado');
CREATE TYPE db_antares.disponibilidad_estado AS ENUM ('Libre','Ocupado');
CREATE TYPE db_antares.estado_cotizacion AS ENUM ('Pendiente','Confirmada','Vencida');
CREATE TYPE db_antares.reserva_estado AS ENUM ('Pendiente','Confirmada','Cancelada','Finalizada');
CREATE TYPE db_antares.origen_reserva AS ENUM ('Web','Presencial','Llamada');
CREATE TYPE db_antares.metodo_pago AS ENUM ('Efectivo','Tarjeta','Transferencia');
CREATE TYPE db_antares.estado_pago AS ENUM ('Pagado','Pendiente','Fallido');
CREATE TYPE db_antares.tipo_pasajero AS ENUM ('Adulto','Niño','Infante');
CREATE TYPE db_antares.config_tipo_enum AS ENUM ('string','number','boolean','json');
CREATE TYPE db_antares.proveedor_oauth AS ENUM ('google','apple','microsoft','manual');

-- Función genérica para actualizar columnas "actualizado_en" en UPDATE
CREATE OR REPLACE FUNCTION db_antares.trigger_set_updated_at()
RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
  IF TG_OP = 'UPDATE' THEN
    IF TG_ARGV[0] IS NOT NULL THEN
      -- argumento = nombre de la columna, por compatibilidad
      EXECUTE format('NEW.%I = CURRENT_TIMESTAMP', TG_ARGV[0]);
    ELSE
      NEW.actualizado_en = CURRENT_TIMESTAMP;
    END IF;
  END IF;
  RETURN NEW;
END;
$$;

-- -----------------------------------------------------
-- Tablas
-- -----------------------------------------------------

-- administradores
CREATE TABLE IF NOT EXISTS administradores (
  id_admin INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  email VARCHAR(150) NOT NULL UNIQUE,
  password_hash VARCHAR(255) NOT NULL,
  salt VARCHAR(64),
  email_verificado BOOLEAN DEFAULT FALSE,
  token_verificacion VARCHAR(255),
  token_expira TIMESTAMP WITHOUT TIME ZONE,
  rol db_antares.admin_role DEFAULT 'admin',
  ultimo_login TIMESTAMP WITHOUT TIME ZONE,
  intentos_fallidos INTEGER DEFAULT 0,
  bloqueado BOOLEAN DEFAULT FALSE,
  creado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  actualizado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- usuarios
CREATE TABLE IF NOT EXISTS usuarios (
  id_usuario INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(100),
  email VARCHAR(255) NOT NULL UNIQUE,
  email_verificado BOOLEAN DEFAULT FALSE,
  password_hash TEXT,
  proveedor_oauth db_antares.proveedor_oauth DEFAULT 'manual',
  id_proveedor VARCHAR(255),
  avatar_url TEXT,
  telefono VARCHAR(20),
  creado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  actualizado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- guias
CREATE TABLE IF NOT EXISTS guias (
  id_guia INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido VARCHAR(100),
  telefono VARCHAR(20),
  email VARCHAR(150) UNIQUE,
  experiencia TEXT,
  estado db_antares.guia_estado DEFAULT 'Libre',
  foto_url VARCHAR(255)
);

-- calificaciones_guias
CREATE TABLE IF NOT EXISTS calificaciones_guias (
  id_calificacion INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario INTEGER NOT NULL,
  id_guia INTEGER NOT NULL,
  calificacion INTEGER,
  comentario TEXT,
  fecha TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_cg_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
  CONSTRAINT fk_cg_guia FOREIGN KEY (id_guia) REFERENCES guias(id_guia) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_calificaciones_id_usuario ON calificaciones_guias (id_usuario);
CREATE INDEX IF NOT EXISTS idx_calificaciones_id_guia ON calificaciones_guias (id_guia);

-- choferes
CREATE TABLE IF NOT EXISTS choferes (
  id_chofer INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido VARCHAR(100),
  telefono VARCHAR(20),
  licencia VARCHAR(50) UNIQUE
);

-- configuraciones_admin
CREATE TABLE IF NOT EXISTS configuraciones_admin (
  id_config_admin INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_admin INTEGER NOT NULL,
  clave VARCHAR(100) NOT NULL,
  valor TEXT,
  descripcion TEXT,
  tipo db_antares.config_tipo_enum DEFAULT 'string',
  creado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  actualizado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT uniq_admin_clave UNIQUE (id_admin, clave),
  CONSTRAINT fk_config_admin_admin FOREIGN KEY (id_admin) REFERENCES administradores(id_admin) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_config_admin_id_admin ON configuraciones_admin (id_admin);

-- configuraciones_sistema
CREATE TABLE IF NOT EXISTS configuraciones_sistema (
  id_config INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  clave VARCHAR(100) NOT NULL UNIQUE,
  valor TEXT,
  descripcion TEXT,
  tipo db_antares.config_tipo_enum DEFAULT 'string',
  categoria VARCHAR(50),
  creado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  actualizado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- cotizaciones
CREATE TABLE IF NOT EXISTS cotizaciones (
  id_cotizacion INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario INTEGER NOT NULL,
  fecha_creacion TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  total_estimado NUMERIC(10,2),
  estado db_antares.estado_cotizacion DEFAULT 'Pendiente',
  CONSTRAINT fk_cot_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_cot_id_usuario ON cotizaciones (id_usuario);

-- regiones
CREATE TABLE IF NOT EXISTS regiones (
  id_region INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_region VARCHAR(150) NOT NULL UNIQUE
);

-- tours
CREATE TABLE IF NOT EXISTS tours (
  id_tour INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  titulo VARCHAR(200) NOT NULL,
  descripcion TEXT,
  precio NUMERIC(10,2) NOT NULL,
  duracion VARCHAR(100),
  id_region INTEGER,
  lugar_salida VARCHAR(200),
  lugar_llegada VARCHAR(200),
  hora_salida TIME WITHOUT TIME ZONE,
  hora_llegada TIME WITHOUT TIME ZONE,
  imagen_principal VARCHAR(255),
  id_guia INTEGER,
  CONSTRAINT fk_tours_guia FOREIGN KEY (id_guia) REFERENCES guias(id_guia) ON DELETE SET NULL,
  CONSTRAINT fk_tours_region FOREIGN KEY (id_region) REFERENCES regiones(id_region) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_tours_id_guia ON tours (id_guia);
CREATE INDEX IF NOT EXISTS idx_tours_id_region ON tours (id_region);

-- detalle_cotizacion
CREATE TABLE IF NOT EXISTS detalle_cotizacion (
  id_detalle INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_cotizacion INTEGER NOT NULL,
  id_tour INTEGER NOT NULL,
  cantidad INTEGER DEFAULT 1,
  precio_unitario NUMERIC(10,2),
  CONSTRAINT fk_detalle_cotizacion_cot FOREIGN KEY (id_cotizacion) REFERENCES cotizaciones(id_cotizacion) ON DELETE CASCADE,
  CONSTRAINT fk_detalle_cotizacion_tour FOREIGN KEY (id_tour) REFERENCES tours(id_tour) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_detalle_id_cotizacion ON detalle_cotizacion (id_cotizacion);
CREATE INDEX IF NOT EXISTS idx_detalle_id_tour ON detalle_cotizacion (id_tour);

-- reservas
CREATE TABLE IF NOT EXISTS reservas (
  id_reserva INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario INTEGER,
  id_administrador INTEGER,
  id_tour INTEGER NOT NULL,
  fecha_reserva TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  fecha_tour DATE NOT NULL,
  monto_total NUMERIC(10,2) NOT NULL,
  estado db_antares.reserva_estado DEFAULT 'Pendiente',
  observaciones TEXT,
  origen_reserva db_antares.origen_reserva DEFAULT 'Web',
  CONSTRAINT fk_reservas_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE,
  CONSTRAINT fk_reservas_tour FOREIGN KEY (id_tour) REFERENCES tours(id_tour) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_reservas_id_usuario ON reservas (id_usuario);
CREATE INDEX IF NOT EXISTS idx_reservas_id_tour ON reservas (id_tour);

-- disponibilidad_guias
CREATE TABLE IF NOT EXISTS disponibilidad_guias (
  id_disponibilidad INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_guia INTEGER NOT NULL,
  fecha DATE NOT NULL,
  estado db_antares.disponibilidad_estado DEFAULT 'Libre',
  id_reserva INTEGER,
  CONSTRAINT fk_disp_guia FOREIGN KEY (id_guia) REFERENCES guias(id_guia) ON DELETE CASCADE,
  CONSTRAINT fk_disp_guia_reserva FOREIGN KEY (id_reserva) REFERENCES reservas(id_reserva) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_disp_guia_id_guia ON disponibilidad_guias (id_guia);
CREATE INDEX IF NOT EXISTS idx_disp_guia_id_reserva ON disponibilidad_guias (id_reserva);

-- vehiculos
CREATE TABLE IF NOT EXISTS vehiculos (
  id_vehiculo INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  marca VARCHAR(100),
  modelo VARCHAR(100),
  placa VARCHAR(20) UNIQUE,
  capacidad INTEGER,
  caracteristicas TEXT,
  id_chofer INTEGER,
  CONSTRAINT fk_vehiculos_chofer FOREIGN KEY (id_chofer) REFERENCES choferes(id_chofer) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_vehiculos_id_chofer ON vehiculos (id_chofer);

-- disponibilidad_vehiculos
CREATE TABLE IF NOT EXISTS disponibilidad_vehiculos (
  id_disponibilidad INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_vehiculo INTEGER NOT NULL,
  fecha DATE NOT NULL,
  estado db_antares.disponibilidad_estado DEFAULT 'Libre',
  id_reserva INTEGER,
  CONSTRAINT fk_disp_vehiculo FOREIGN KEY (id_vehiculo) REFERENCES vehiculos(id_vehiculo) ON DELETE CASCADE,
  CONSTRAINT fk_disp_vehiculo_reserva FOREIGN KEY (id_reserva) REFERENCES reservas(id_reserva) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_disp_vehiculo_id_vehiculo ON disponibilidad_vehiculos (id_vehiculo);
CREATE INDEX IF NOT EXISTS idx_disp_vehiculo_id_reserva ON disponibilidad_vehiculos (id_reserva);

-- email_verificacion
CREATE TABLE IF NOT EXISTS email_verificacion (
  id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario INTEGER NOT NULL,
  token VARCHAR(64) NOT NULL,
  fecha_creacion TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  fecha_expiracion TIMESTAMP WITHOUT TIME ZONE,
  CONSTRAINT fk_email_ver_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario)
);
CREATE INDEX IF NOT EXISTS idx_email_ver_id_usuario ON email_verificacion (id_usuario);

-- experiencias
CREATE TABLE IF NOT EXISTS experiencias (
  id_experiencia INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  imagen_url VARCHAR(255) NOT NULL,
  comentario TEXT,
  fecha_publicacion TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  id_usuario INTEGER,
  CONSTRAINT fk_experiencias_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE SET NULL
);
CREATE INDEX IF NOT EXISTS idx_experiencias_id_usuario ON experiencias (id_usuario);

-- idiomas
CREATE TABLE IF NOT EXISTS idiomas (
  id_idioma INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nombre_idioma VARCHAR(100) NOT NULL
);

-- guia_idiomas (tabla intermedia)
CREATE TABLE IF NOT EXISTS guia_idiomas (
  id_guia INTEGER NOT NULL,
  id_idioma INTEGER NOT NULL,
  PRIMARY KEY (id_guia, id_idioma),
  CONSTRAINT fk_guia_idiomas_guia FOREIGN KEY (id_guia) REFERENCES guias(id_guia) ON DELETE CASCADE,
  CONSTRAINT fk_guia_idiomas_idioma FOREIGN KEY (id_idioma) REFERENCES idiomas(id_idioma) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_guia_idiomas_id_idioma ON guia_idiomas (id_idioma);

-- pagos
CREATE TABLE IF NOT EXISTS pagos (
  id_pago INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_reserva INTEGER NOT NULL,
  fecha_pago TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  monto NUMERIC(10,2) NOT NULL,
  metodo_pago db_antares.metodo_pago,
  estado_pago db_antares.estado_pago DEFAULT 'Pendiente',
  CONSTRAINT fk_pagos_reserva FOREIGN KEY (id_reserva) REFERENCES reservas(id_reserva) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_pagos_id_reserva ON pagos (id_reserva);

-- pasajeros
CREATE TABLE IF NOT EXISTS pasajeros (
  id_pasajero INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_reserva INTEGER NOT NULL,
  nombre VARCHAR(100) NOT NULL,
  apellido VARCHAR(100) NOT NULL,
  dni_pasaporte VARCHAR(20) NOT NULL,
  nacionalidad VARCHAR(50),
  telefono VARCHAR(20),
  tipo_pasajero db_antares.tipo_pasajero DEFAULT 'Adulto',
  CONSTRAINT fk_pasajeros_reserva FOREIGN KEY (id_reserva) REFERENCES reservas(id_reserva) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_pasajeros_id_reserva ON pasajeros (id_reserva);

-- preferencias_usuario
CREATE TABLE IF NOT EXISTS preferencias_usuario (
  id_preferencia INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  id_usuario INTEGER NOT NULL,
  clave VARCHAR(100) NOT NULL,
  valor TEXT,
  tipo db_antares.config_tipo_enum DEFAULT 'string',
  creado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  actualizado_en TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT uniq_user_preference UNIQUE (id_usuario, clave),
  CONSTRAINT fk_pref_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE
);
CREATE INDEX IF NOT EXISTS idx_pref_usuario_id_usuario ON preferencias_usuario (id_usuario);

-- tours_diarios
CREATE TABLE IF NOT EXISTS tours_diarios (
  id_tour_diario INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  fecha DATE NOT NULL,
  id_tour INTEGER NOT NULL,
  id_guia INTEGER NOT NULL,
  id_chofer INTEGER NOT NULL,
  id_vehiculo INTEGER NOT NULL,
  num_adultos INTEGER DEFAULT 0,
  num_ninos INTEGER DEFAULT 0,
  hora_salida TIME WITHOUT TIME ZONE NOT NULL,
  hora_retorno TIME WITHOUT TIME ZONE,
  observaciones TEXT,
  fecha_registro TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT fk_td_tour FOREIGN KEY (id_tour) REFERENCES tours(id_tour),
  CONSTRAINT fk_td_guia FOREIGN KEY (id_guia) REFERENCES guias(id_guia),
  CONSTRAINT fk_td_chofer FOREIGN KEY (id_chofer) REFERENCES choferes(id_chofer),
  CONSTRAINT fk_td_vehiculo FOREIGN KEY (id_vehiculo) REFERENCES vehiculos(id_vehiculo)
);
CREATE INDEX IF NOT EXISTS idx_tours_diarios_id_tour ON tours_diarios (id_tour);
CREATE INDEX IF NOT EXISTS idx_tours_diarios_id_guia ON tours_diarios (id_guia);
CREATE INDEX IF NOT EXISTS idx_tours_diarios_id_chofer ON tours_diarios (id_chofer);
CREATE INDEX IF NOT EXISTS idx_tours_diarios_id_vehiculo ON tours_diarios (id_vehiculo);

-- Triggers para mantener actualizado_en en tablas que lo usan
CREATE TRIGGER tr_administradores_set_updated_at
BEFORE UPDATE ON administradores
FOR EACH ROW
EXECUTE FUNCTION db_antares.trigger_set_updated_at('actualizado_en');

CREATE TRIGGER tr_usuarios_set_updated_at
BEFORE UPDATE ON usuarios
FOR EACH ROW
EXECUTE FUNCTION db_antares.trigger_set_updated_at('actualizado_en');

CREATE TRIGGER tr_configuraciones_admin_set_updated_at
BEFORE UPDATE ON configuraciones_admin
FOR EACH ROW
EXECUTE FUNCTION db_antares.trigger_set_updated_at('actualizado_en');

CREATE TRIGGER tr_configuraciones_sistema_set_updated_at
BEFORE UPDATE ON configuraciones_sistema
FOR EACH ROW
EXECUTE FUNCTION db_antares.trigger_set_updated_at('actualizado_en');

CREATE TRIGGER tr_preferencias_usuario_set_updated_at
BEFORE UPDATE ON preferencias_usuario
FOR EACH ROW
EXECUTE FUNCTION db_antares.trigger_set_updated_at('actualizado_en');

-- Nota: MySQL AUTO_INCREMENT, ENGINE, CHARSET y COLLATE no tienen equivalentes directos en PostgreSQL
-- Si desea preservar valores iniciales de secuencias (AUTO_INCREMENT), puede ajustar las secuencias con:
-- SELECT setval(pg_get_serial_sequence('tabla','id'), <valor_inicial>);

-- Fin del script
